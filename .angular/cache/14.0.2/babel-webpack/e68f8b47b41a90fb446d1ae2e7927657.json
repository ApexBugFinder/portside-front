{"ast":null,"code":"import { UserManager, WebStorageStateStore } from 'oidc-client'; // import { AppUser } from '../user/models/user';\n\nimport { Constants } from '../helpers/Constants';\nimport { throwError } from 'rxjs';\nimport * as authActions from '../auth/state/auth.actions';\nimport * as sharedActions from '../shared/state/shared-actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, authStore, projectDataStore, experienceDataStore, certificationDataStore, degreeDataStore, sharedStore) {\n      this.router = router;\n      this.authStore = authStore;\n      this.projectDataStore = projectDataStore;\n      this.experienceDataStore = experienceDataStore;\n      this.certificationDataStore = certificationDataStore;\n      this.degreeDataStore = degreeDataStore;\n      this.sharedStore = sharedStore;\n      this.manager = new UserManager(Constants.getClientSettings);\n      this.userWebStore = new WebStorageStateStore({\n        store: window.localStorage\n      });\n    }\n\n    isLoggedIn() {\n      console.log(\"Hello from AuthService IsLoggedIn\", this.userOidc);\n      return this.userOidc != null && !this.userOidc.expired;\n    }\n\n    getClaims() {\n      return this.userOidc.profile;\n    }\n\n    getAuthorizationHeaderValue() {\n      return `${this.userOidc.token_type} ${this.userOidc.access_token}`; //  return `${this.userOidc.access_token}`;\n    }\n\n    startAuthentication() {\n      console.log(\"Hello from AuthService startAuthentication\");\n      return this.manager.signinRedirect();\n    }\n\n    completeAuthentication() {\n      console.log(\"Authentication\");\n      console.log(window.location.hash); // window.location.hash = decodeURIComponent(window.location.hash);\n\n      console.log(window.location.hash);\n      const myRedirectUrl = window.location.hash.replace(\"?\", \"#\");\n      console.log('myRedirectURL: ', myRedirectUrl);\n      this.manager.clearStaleState();\n      return this.manager.signinRedirectCallback(myRedirectUrl).then(useraa => {\n        console.log(\"completeAuth in authService\", useraa);\n        this.userOidc = useraa;\n        this.authStore.dispatch(new authActions.SetAuthorizedUserId(useraa.profile.sub));\n        this.authStore.dispatch(new authActions.SetAuthenticated());\n        const userID = JSON.stringify(useraa.profile.sub);\n        this.userWebStore.set(`user:${Constants.authority}:portfoliofront-access`, `${useraa.access_token}`); // this.userWebStore.set(\n        //   `user:${Constants.authority}:portfoliofront-id`,\n        //   `${useraa.id_token}`\n        // );\n\n        this.sharedStore.dispatch(new sharedActions.SetUserId(useraa.profile.sub));\n        this.sharedStore.dispatch(new sharedActions.LoadUserStateById(useraa.profile.sub));\n        this.routeTo();\n      }).catch(error => {\n        console.log(error);\n        this.routeTo();\n      }); // THIS MIGHT BE THE SPOT TO HANDLE SETAUTHENTICATED USER\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage;\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n\n      console.error(err);\n      return throwError(errorMessage);\n    }\n\n    logout() {\n      this.manager.createSignoutRequest();\n      this.userWebStore = new WebStorageStateStore({\n        store: window.localStorage\n      });\n      this.authStore.dispatch(new authActions.ClearAuthorizedUserId());\n      this.authStore.dispatch(new authActions.SetNotAuthenticated()); // CLEAR ALL OF STATE - dont' clear state, unauthorizing will cut off editMOde\n      // this.projectDataStore.dispatch(projectDataActions.clearProjects());\n      // this.experienceDataStore.dispatch(experienceDataActions.clearExperiences());\n      // this.certificationDataStore.dispatch(certificaitonDataActions.clearCertifications());\n      // this.degreeDataStore.dispatch(degreeDataActions.clearDegrees());\n\n      this.userWebStore.remove(`user:${Constants.authority}:portfoliofront-access`);\n      this.userWebStore.remove(`user:${Constants.authority}:portfoliofront`);\n      this.userWebStore.remove(`user:${Constants.authority}:portfoliofront-id`);\n      this.userWebStore.remove(`oidc:${Constants.authority}:portfoliofront`);\n      this.manager.clearStaleState();\n      this.manager.removeUser();\n      this.manager.processSignoutResponse();\n      this.manager.revokeAccessToken();\n      this.router.navigate([\"\"]); //    this.router.ngOnDestroy();\n    }\n\n    routeTo() {\n      this.router.navigate([\"/pages/home\"]);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}