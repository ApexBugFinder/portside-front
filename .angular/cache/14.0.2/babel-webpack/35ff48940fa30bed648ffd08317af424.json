{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { printServiceInfo } from \"../../helpers/helperFunctions\";\nimport { Constants } from \"../../helpers/Constants\";\nimport { map, timeout } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/auth/auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.ctlrName = 'projectcreator/';\n      this.apiRt = Constants.apiRoot;\n      this.apiAddress = this.apiRt + this.ctlrName;\n      this.clientRt = Constants.clientRoot;\n    }\n\n    getUserInfo(userName) {\n      this.hdrs = new HttpHeaders().append('Access-Control-Allow-Origin', [this.apiRt, this.apiAddress, this.clientRt]).append('Accept', 'application/json').append('Access-Control-Allow-Methods', ['GET']).append('content-type', 'application/json');\n      const address = this.apiAddress + 'username/' + userName;\n      console.log('HELLO', this.clientRt);\n      printServiceInfo(address, userName, this.hdrs);\n      return this.http.get(address, {\n        headers: this.hdrs\n      }).pipe(timeout(10000), map(userState => {\n        console.log(\"User's Info: \", userState);\n        return userState;\n      }));\n    }\n\n    getUserById(userId) {\n      console.log('userID: ', userId);\n      const address = this.apiAddress + 'userID/' + userId;\n      this.hdrs = new HttpHeaders().set(\"Access-Control-Allow-Origin\", [this.apiRt, this.apiAddress, Constants.authority, this.clientRt]).set(\"Accept\", \"application/json\").set(\"Authorization\", this.authService.getAuthorizationHeaderValue()).set(\"Access-Control-Allow-Methods\", [\"GET\", \"POST\", \"PUT\"]).set(\"content-type\", \"application/json\");\n      console.log('HELLO', this.clientRt);\n      printServiceInfo(address, userId, this.hdrs);\n      return this.http.get(address, {\n        headers: this.hdrs\n      }).pipe(timeout(30000), map(userState => {\n        console.log(\"User's Info: \", userState);\n        return userState;\n      }));\n    } // GET USERS BY USERNAME SEARCH\n\n\n    getUsersByUsernameSearch(keyword) {\n      let keywordObject = {\n        keyword: keyword\n      };\n      const address = this.apiAddress + 'search/';\n      this.hdrs = new HttpHeaders().set('access-control-allow-origin', [this.apiRt, this.apiAddress, this.clientRt, address]).set('Accept', 'application/json').set('Access-Control-Allow-Methods', ['PUT', 'GET', 'POST']).set('content-type', 'application/json'); // Address needs to be updated, and the backend endpoint needs to be\n      // created\n\n      console.log('HELLO', this.clientRt);\n      printServiceInfo(address, keyword, this.hdrs);\n      return this.http.put(address, JSON.stringify(keyword), {\n        headers: this.hdrs\n      }).pipe(timeout(16000), map(users => {\n        console.log(\"User's Info: \", users);\n        return users;\n      }));\n    }\n\n    updateUserInfo(user) {\n      this.hdrs = new HttpHeaders().set(\"Access-Control-Allow-Origin\", [this.apiRt, this.apiAddress, this.clientRt]).set(\"Access-Control-Allow-Methods\", [\"PUT\", \"GET\", \"POST\"]).set(\"Accept\", \"application/json\").set(\"content-type\", \"application/json\");\n      const address = this.apiAddress + 'update/' + user.id;\n      return this.http.put(address, user, {\n        headers: this.hdrs\n      }).pipe(timeout(12000), map(user => {\n        console.log('User Updated to: ', user);\n        return user;\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}