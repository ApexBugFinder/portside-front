{"ast":null,"code":"import { faAnchor } from '@fortawesome/free-solid-svg-icons';\nimport { defaultExperience } from 'src/app/experience/Models/experience';\nimport { select } from '@ngrx/store';\nimport * as fromExperienceData from '../../experience/state';\nimport * as fromExperienceShell from '../../experience/experience-shell/state';\nimport * as experienceShellActions from '../../experience/experience-shell/state/experience-shell.actions';\nimport { EditModalShellComponent } from 'src/app/experience/editModal/edit-modal-shell/edit-modal-shell.component';\nimport { MakeGuid } from '../../helpers/make-guid';\nimport * as fromShared from '../../shared/state';\nimport * as fromAuth from '../../auth/state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/experience/experience.service\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/material/dialog\";\n\nfunction ExperienceComponent_app_action_buttons_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-action-buttons\", 7);\n    i0.ɵɵlistener(\"addClassSignal\", function ExperienceComponent_app_action_buttons_5_Template_app_action_buttons_addClassSignal_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.createExperience());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"myClass\", ctx_r0.pageClass);\n  }\n}\n\nfunction ExperienceComponent_app_experience_shell_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-experience-shell\", 8);\n  }\n}\n\nexport let ExperienceComponent = /*#__PURE__*/(() => {\n  class ExperienceComponent {\n    constructor(experienceService, experienceDataStore, dialog, authStore, sharedStore, experienceShellStore) {\n      this.experienceService = experienceService;\n      this.experienceDataStore = experienceDataStore;\n      this.dialog = dialog;\n      this.authStore = authStore;\n      this.sharedStore = sharedStore;\n      this.experienceShellStore = experienceShellStore;\n      this.first = false;\n      this.focalPoint = 0;\n      this.focusedAt = 0;\n      this.faAnchor = faAnchor;\n      this.pageClass = \"Experience\";\n      this.loggedInMenuOpen$ = this.sharedStore.pipe(select(fromShared.getSideMenuState));\n      this.userID$ = this.sharedStore.pipe(select(fromShared.getUserId));\n      this.experienceData$ = this.experienceDataStore.pipe(select(fromExperienceData.selectAllExperiences));\n      this.currentExperience$ = this.experienceShellStore.pipe(select(fromExperienceShell.getCurrentExperience));\n      this.experienceDataTotal$ = this.experienceDataStore.pipe(select(fromExperienceData.selectExperiencesTotal));\n      this.isAuthenticated$ = this.authStore.pipe(select(fromAuth.getIsAuthenticated));\n      this.authenticatedUserID$ = this.authStore.pipe(select(fromAuth.getAuthenticatedUserId));\n    }\n\n    ngOnInit() {\n      this.pageClass = 'Experience';\n      this.currentExperience$.subscribe({\n        next: value => {\n          var _a, _b;\n\n          this.currentExperience = value;\n          console.log('currentExperience is: ', value);\n          console.log('experienceDatat: ', this.experienceData);\n          if (this.currentExperience && ((_a = this.experienceData) === null || _a === void 0 ? void 0 : _a.length) > 0) this.focusedAt = (_b = this.experienceData) === null || _b === void 0 ? void 0 : _b.findIndex(i => (i === null || i === void 0 ? void 0 : i.id) == this.currentExperience.id);\n          console.log('my new focal point: ', this.focusedAt);\n          console.log('My current experience on Component Page', value);\n        },\n        error: err => console.log('OOps sorry, error occured getting the user\\'s current experience from store in Experiences component: ', err),\n        complete: () => console.log('Completed getting user\\'s Current Experiences from ngrx store in Experiences component')\n      });\n      this.userID$.subscribe({\n        next: value => {\n          if (value) {\n            this.userID = value;\n            this.experienceShellStore.dispatch(new experienceShellActions.LoadExperiencesByProjectCreatorIDFromDB(this.userID));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the user's ID from Shared State store in  Experience component:\", err),\n        complete: () => console.log(\"Completed getting user's ID ngrx Shared State store in Experience component\")\n      });\n      this.isAuthenticated$.subscribe({\n        next: value => {\n          this.isAuthenticated = value;\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the user's isAuthenticated from Auth State store in  Experience component:\", err),\n        complete: () => console.log(\"Completed getting user's isAuthenticated ngrx Auth State store in Experience component\")\n      });\n      this.experienceData$.subscribe({\n        next: value => {\n          this.experienceData = value;\n          this.focusExperience();\n          console.log('My experiences called from DB into experiences Component Page', value);\n          return value;\n        },\n        error: err => console.log('OOps sorry, error occured getting the user\\'s experiences from store in Experiences component: ', err),\n        complete: () => console.log('Completed getting user\\'s Experiences from ngrx store in Experiences component')\n      });\n      this.experienceDataTotal$.subscribe({\n        next: value => {\n          this.experienceDataTotal = value;\n          console.log('Total Number of experiences called from DB into NGRX state into experiences Component Page', value);\n          return value;\n        },\n        error: err => console.log('OOps sorry, error occured getting the Total of user\\'s Experiences from store in Experiences component: ', err),\n        complete: () => console.log('Completed getting user\\'s Experiences from ngrx store inExperiences component')\n      });\n    }\n\n    createExperience() {\n      // SET CURRENT EXPERIENCE AS DEFAULT EXPERIENCE\n      // GET DEFAULT EXPERIENCE\n      let newExp = JSON.parse(JSON.stringify(defaultExperience)); // CREATE  NEW ID WITH 'new-' PREFIX\n\n      newExp.id = JSON.stringify(new MakeGuid().id);\n      newExp.projectCreatorID = this.userID;\n      this.experienceShellStore.dispatch(new experienceShellActions.SetOriginalExperience(newExp));\n      this.experienceShellStore.dispatch(new experienceShellActions.SaveExperienceToDB()); // OPEN DIALOG OF EDIT MODAL SHELL\n\n      const dialogRef = this.dialog.open(EditModalShellComponent, {\n        width: '550px',\n        panelClass: 'custom-modalbox2'\n      });\n    }\n\n    focusExperience() {\n      if (this.currentExperience.id === '' && this.experienceData.length > 0) {\n        let focalPoint = 0;\n        this.experienceShellStore.dispatch(new experienceShellActions.SetCurrentExperience(this.experienceData[focalPoint]));\n      }\n    }\n\n    upOneExperience() {\n      console.log(this.currentExperience); // GET INDEX NUMBER OF CURRENT EXPERIENCE\n\n      console.log('the experienceData: ', this.experienceData);\n      let focusedAtLocal = this.experienceData.findIndex(i => (i === null || i === void 0 ? void 0 : i.id) == this.currentExperience.id);\n      console.log('index number of current Experience: ', focusedAtLocal); // CHECK TO TO SEE IF INDEX NUMBER IS LAST NUMBER\n\n      let dataArrayLength = this.experienceData.length;\n      console.log('what is the length of data array: ', this.experienceData.length);\n\n      if (focusedAtLocal < this.experienceData.length - 1) {\n        // ADD ONE TO INDEX NUMBER\n        focusedAtLocal++;\n        console.log('focused new value: ', focusedAtLocal);\n        console.log('new Experience from experienceData: ', this.experienceData[focusedAtLocal]); // GET EXPERIENCE WITH INDENTICAL INDEX NUMBER\n\n        this.experienceShellStore.dispatch(new experienceShellActions.SetCurrentExperience(this.experienceData[focusedAtLocal]));\n      }\n    }\n\n    downOneExperience() {\n      console.log('current experience is: ', this.currentExperience); // GET INDEX NUMBER OF CURRENT EXPERIENCE\n\n      console.log('the experienceData: ', this.experienceData);\n      let focusedAtLocal = this.experienceData.findIndex(i => (i === null || i === void 0 ? void 0 : i.id) == this.currentExperience.id);\n      console.log('index number of current Experience: ', focusedAtLocal); // CHECK TO TO SEE IF INDEX NUMBER IS LAST NUMBER\n\n      let dataArrayLength = this.experienceData.length;\n      console.log('what is the length of data array: ', this.experienceData.length);\n\n      if (focusedAtLocal >= 1) {\n        // SUBTRACT ONE TO INDEX NUMBER\n        focusedAtLocal--;\n        console.log('focused new value: ', focusedAtLocal); // GET EXPERIENCE WITH INDENTICAL INDEX NUMBER\n\n        this.experienceShellStore.dispatch(new experienceShellActions.SetCurrentExperience(this.experienceData[focusedAtLocal]));\n      }\n    }\n\n  }\n\n  ExperienceComponent.ɵfac = function ExperienceComponent_Factory(t) {\n    return new (t || ExperienceComponent)(i0.ɵɵdirectiveInject(i1.ExperienceService), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  ExperienceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExperienceComponent,\n    selectors: [[\"app-experience\"]],\n    decls: 11,\n    vars: 8,\n    consts: [[1, \"shellContainer\"], [1, \"shellContent\"], [1, \"actionButtons\"], [1, \"actionButtonsContainer\"], [\"class\", \"appButtons\", 3, \"myClass\", \"addClassSignal\", 4, \"ngIf\"], [1, \"experienceContent\"], [\"class\", \"experienceShell\", 4, \"ngIf\"], [1, \"appButtons\", 3, \"myClass\", \"addClassSignal\"], [1, \"experienceShell\"]],\n    template: function ExperienceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵelement(4, \"app-experience-controller\");\n        i0.ɵɵtemplate(5, ExperienceComponent_app_action_buttons_5_Template, 1, 1, \"app-action-buttons\", 4);\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵpipe(7, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵtemplate(9, ExperienceComponent_app_experience_shell_9_Template, 1, 0, \"app-experience-shell\", 6);\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.isAuthenticated && i0.ɵɵpipeBind1(6, 2, ctx.userID$) == i0.ɵɵpipeBind1(7, 4, ctx.authenticatedUserID$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 6, ctx.experienceData$).length > 0);\n      }\n    },\n    styles: [\".shellContainer[_ngcontent-%COMP%]{width:100%;justify-self:flex-end}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]{width:80%;row-gap:20px;justify-content:flex-end;margin:auto}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]{z-index:100;height:60px;width:100%}@media screen and (min-width: 601px){.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:10px;justify-content:flex-end;width:100%;margin-top:0;margin-left:20px}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   button.gapper[_ngcontent-%COMP%]{background-color:#95bcd380;font-family:futura-pt;border:#707070 1px solid}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]{font-family:bio-sans,sans-serif;font-weight:200;font-style:normal;font-size:18px;margin:20px 0}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:40px;margin:auto;justify-self:flex-start}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]   fa-icon.anchorIcon[_ngcontent-%COMP%]{align-self:center;font-size:30px}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{vertical-align:center;justify-self:center;align-self:center;margin:auto}}@media screen and (max-width: 600px){.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:10px;justify-content:flex-end;width:100%;margin-top:60px;margin-left:20px}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   button.gapper[_ngcontent-%COMP%]{background-color:#95bcd380;font-family:futura-pt;border:#707070 1px solid}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]{font-family:bio-sans,sans-serif;font-weight:200;font-style:normal;font-size:18px;margin:20px 0}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:20px;margin:auto;justify-self:flex-start}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]   fa-icon.anchorIcon[_ngcontent-%COMP%]{align-self:center;font-size:30px}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   .actionButtonsContainer[_ngcontent-%COMP%]   .experienceCtroller[_ngcontent-%COMP%]   .experienceControllerContent[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{vertical-align:center;justify-self:center;align-self:center;margin:auto}}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .actionButtons[_ngcontent-%COMP%]   app-action-buttons[_ngcontent-%COMP%]{width:30%}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .experienceContent[_ngcontent-%COMP%]{height:auto;width:100%;display:flex;flex-direction:row;justify-self:flex-end;justify-content:flex-end;align-items:flex-start}.shellContainer[_ngcontent-%COMP%]   .shellContent[_ngcontent-%COMP%]   .experienceContent[_ngcontent-%COMP%]   .experienceShell[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return ExperienceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}