{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { select } from '@ngrx/store';\nimport * as fromSearchBar from './index';\nimport * as SearchBarActions from './searchbar.actions';\nimport * as SearchBarResultsActions from '../../searchbar-results/state/searchbar-results.actions';\nimport { catchError, map, mergeMap, tap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport * as SharedUserDataAction from '../../../shared/userData/state/userData.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../Models/user.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let SearchBarEffects = /*#__PURE__*/(() => {\n  class SearchBarEffects {\n    constructor(actions$, userService, sharedUserDataStore, searchBarResultsStateStore, searchBarStateStore) {\n      this.actions$ = actions$;\n      this.userService = userService;\n      this.sharedUserDataStore = sharedUserDataStore;\n      this.searchBarResultsStateStore = searchBarResultsStateStore;\n      this.searchBarStateStore = searchBarStateStore;\n      this.LoadSearchBarSearch$ = createEffect(() => this.actions$.pipe(ofType(SearchBarActions.SearchBarActionTypes.LOADS_SEARCHBAR_SEARCH_WORD), mergeMap(action => this.userService.getUsersByUsernameSearch(this.searchyWord).pipe(tap(() => console.log('searchyWord: ', this.searchyWord)), map(payload => {\n        this.searchBarResultsStateStore.dispatch(SearchBarResultsActions.clearUsers());\n        this.sharedUserDataStore.dispatch(SharedUserDataAction.upsertUsers({\n          Users: payload\n        }));\n        this.searchBarResultsStateStore.dispatch(SearchBarResultsActions.addUsers({\n          Users: payload\n        }));\n        return new SearchBarActions.LoadsSearchBarSearchWordSuccess(payload);\n      }), catchError(err => of(new SearchBarActions.LoadsSearchBarSearchWordFail(err)))))));\n      this.searchBarStateStore.pipe(select(fromSearchBar.selectSearchWord)).subscribe(value => {\n        this.searchyWord = value;\n        console.log(this.searchyWord);\n      });\n    }\n\n  }\n\n  SearchBarEffects.ɵfac = function SearchBarEffects_Factory(t) {\n    return new (t || SearchBarEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i3.Store));\n  };\n\n  SearchBarEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchBarEffects,\n    factory: SearchBarEffects.ɵfac\n  });\n  return SearchBarEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}