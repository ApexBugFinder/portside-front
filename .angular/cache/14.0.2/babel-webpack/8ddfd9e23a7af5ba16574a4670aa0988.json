{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { select } from '@ngrx/store';\nimport * as fromShared from './';\nimport * as sharedActions from './shared-actions';\nimport * as UserActions from \"../../user/state/user.actions\";\nimport * as experienceDataActions from '../../experience/state/experience.actions';\nimport * as projectDataActions from '../../project/state/project.actions';\nimport * as degreeDataActions from '../../education/Models/degree/state/degree.actions';\nimport * as certDataActions from '../../education/Models/certification/state/certification.actions';\nimport * as sharedDataActions from '../userData/state/userData.actions';\nimport { of } from \"rxjs\";\nimport { catchError, map, mergeMap, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/user/Models/user.service\";\nexport let SharedEffects = /*#__PURE__*/(() => {\n  class SharedEffects {\n    constructor(actions$, shareStore, projectStore, experienceStore, experienceShellStore, degreeShellStore, certDataStore, degreeDataStore, sharedDataStore, userStore, userService) {\n      this.actions$ = actions$;\n      this.shareStore = shareStore;\n      this.projectStore = projectStore;\n      this.experienceStore = experienceStore;\n      this.experienceShellStore = experienceShellStore;\n      this.degreeShellStore = degreeShellStore;\n      this.certDataStore = certDataStore;\n      this.degreeDataStore = degreeDataStore;\n      this.sharedDataStore = sharedDataStore;\n      this.userStore = userStore;\n      this.userService = userService;\n      this.GetUserState$ = createEffect(() => this.actions$.pipe(ofType(sharedActions.SharedActionTypes.LOAD_USERSTATE), mergeMap(action => this.userService.getUserInfo(action.payload).pipe( // tap((payload: UserState) => console.log(payload)),\n      tap(userState => {\n        if (userState.id != null) {\n          console.log(userState);\n        }\n      }), map(userState => {\n        if (userState.id != '') {\n          console.log(userState.certifications);\n          let myUsers = [];\n          myUsers.push(userState);\n          this.sharedDataStore.dispatch(sharedDataActions.upsertUsers({\n            Users: myUsers\n          }));\n          let user = {\n            id: userState.id,\n            username: userState.username,\n            email: userState.email,\n            userPicUrl: userState.userPicUrl\n          };\n          this.shareStore.dispatch(new sharedActions.SetUserId(userState.id));\n          this.shareStore.dispatch(new sharedActions.SetUsername(userState.username));\n          this.userStore.dispatch(new UserActions.SetCurrentUser(user));\n          this.projectStore.dispatch(projectDataActions.clearProjects());\n          this.projectStore.dispatch(projectDataActions.addProjects({\n            projects: userState.projects\n          }));\n          this.degreeDataStore.dispatch(degreeDataActions.clearDegrees());\n          this.degreeDataStore.dispatch(degreeDataActions.addDegrees({\n            Degrees: userState.degrees\n          }));\n          this.certDataStore.dispatch(certDataActions.clearCertifications());\n          this.certDataStore.dispatch(certDataActions.addCertifications({\n            Certifications: userState.certifications\n          }));\n          this.experienceStore.dispatch(experienceDataActions.clearExperiences());\n          this.experienceStore.dispatch(experienceDataActions.addExperiences({\n            experiences: userState.experiences\n          }));\n        }\n\n        return new sharedActions.LoadUserStateSuccess(userState.id);\n      }, catchError(err => of(new sharedActions.LoadUserStateFail(err))))))));\n      this.GetUserStateById$ = createEffect(() => this.actions$.pipe(ofType(sharedActions.SharedActionTypes.LOAD_USERSTATE_ByID), mergeMap(action => this.userService.getUserById(action.payload).pipe( // tap((payload: UserState) => console.log(payload)),\n      tap(userState => {\n        if (userState.id != null) {\n          console.log(userState);\n        }\n      }), map(userState => {\n        if (userState.id != '') {\n          console.log(userState.certifications);\n          let myUsers = [];\n          myUsers.push(userState);\n          this.sharedDataStore.dispatch(sharedDataActions.upsertUsers({\n            Users: myUsers\n          }));\n          this.shareStore.dispatch(new sharedActions.SetUserId(userState.id));\n          this.shareStore.dispatch(new sharedActions.SetUsername(userState.username));\n          this.shareStore.dispatch(new sharedActions.SetUserProfilePic(userState.userPicUrl));\n          this.projectStore.dispatch(projectDataActions.clearProjects());\n          this.projectStore.dispatch(projectDataActions.addProjects({\n            projects: userState.projects\n          }));\n          this.degreeDataStore.dispatch(degreeDataActions.clearDegrees());\n          this.degreeDataStore.dispatch(degreeDataActions.addDegrees({\n            Degrees: userState.degrees\n          }));\n          this.certDataStore.dispatch(certDataActions.clearCertifications());\n          this.certDataStore.dispatch(certDataActions.addCertifications({\n            Certifications: userState.certifications\n          }));\n          this.experienceStore.dispatch(experienceDataActions.clearExperiences());\n          this.experienceStore.dispatch(experienceDataActions.addExperiences({\n            experiences: userState.experiences\n          }));\n        }\n\n        return new sharedActions.LoadUserStateByIdSuccess(userState);\n      }, catchError(err => of(new sharedActions.LoadUserStateByIdFail(err))))))));\n      this.shareStore.pipe(select(fromShared.getUsername)).subscribe(value => this.userName = value);\n    }\n\n  }\n\n  SharedEffects.ɵfac = function SharedEffects_Factory(t) {\n    return new (t || SharedEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.UserService));\n  };\n\n  SharedEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedEffects,\n    factory: SharedEffects.ɵfac\n  });\n  return SharedEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}