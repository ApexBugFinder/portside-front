{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { select } from \"@ngrx/store\";\nimport * as UserActions from './user.actions';\nimport * as fromAuth from '../../auth/state';\nimport * as fromUser from './';\nimport * as SharedActions from '../../shared/state/shared-actions';\nimport * as UserSharedData from '../../shared/userData/state';\nimport * as UserSharedDataActions from '../../shared/userData/state/userData.actions';\nimport { of } from \"rxjs\";\nimport { map, mergeMap, tap, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../Models/user.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let UserEffects = /*#__PURE__*/(() => {\n  class UserEffects {\n    constructor(actions$, userService, userStateStore, authStateStore, sharedStore, userDataStore) {\n      this.actions$ = actions$;\n      this.userService = userService;\n      this.userStateStore = userStateStore;\n      this.authStateStore = authStateStore;\n      this.sharedStore = sharedStore;\n      this.userDataStore = userDataStore;\n      this.LoadUserStateByAuthorizedUserId$ = createEffect(() => this.actions$.pipe(ofType(UserActions.UserActionTypes.LOAD_USER_STATE), mergeMap(action => this.userService.getUserById(this.authorizedUserId).pipe(tap(() => console.log('NGRX EFFECT - READ ALL USER\\'S FROM DB')), map(payload => {\n        this.sharedStore.dispatch(new SharedActions.SetUserId(payload.id));\n        this.sharedStore.dispatch(new SharedActions.SetUserProfilePic(payload.userPicUrl));\n        this.sharedStore.dispatch(new SharedActions.SetUsername(payload.username));\n        return new UserActions.LoadUserStateSuccess(payload);\n      }), catchError(err => of(new UserActions.LoadUserStateFail(err)))))));\n      this.UpdateUserInfo$ = createEffect(() => this.actions$.pipe(ofType(UserActions.UserActionTypes.UPDATE_USER), mergeMap(action => this.userService.updateUserInfo(this.myUser).pipe(tap(value => console.log('NGRX EFFECT - UPDATED USER: ', value)), map(payload => {\n        if (this.myUserState && payload) {\n          let b = JSON.parse(JSON.stringify(this.myUserState));\n          b.username = payload.username;\n          b.email = payload.username;\n          this.userDataStore.dispatch(UserSharedDataActions.upsertUser({\n            UserState: b\n          }));\n        }\n\n        return new UserActions.UpdateUserSuccess(payload);\n      }), catchError(err => of(new UserActions.UpdateUserFail(err)))))));\n      this.authStateStore.pipe(select(fromAuth.getAuthenticatedUserId)).subscribe({\n        next: value => {\n          this.authorizedUserId = value;\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the authorized user's Id from the Authentication store in User Effects: \", err),\n        complete: () => console.log(\"Completed getting Authorized User's ID from ngrx Authentication store in User Effects\")\n      });\n      this.userStateStore.pipe(select(fromUser.getCurrentUserInfo)).subscribe({\n        next: value => {\n          if (value) this.myUser = value;\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the user Id from the User store in User Effects: \", err),\n        complete: () => console.log(\"Completed getting User from User store in User Effects\")\n      });\n      this.userDataStore.pipe(select(UserSharedData.selectAllUsers)).subscribe({\n        next: value => {\n          if (value.length > 0) {\n            this.myUserState = value.filter(i => (i === null || i === void 0 ? void 0 : i.id) === this.myUser.id)[0];\n          }\n        },\n        error: err => console.log('OOps sorry, error occured getting the Shared User Data from the Shared Data store in User Effects: ', err),\n        complete: () => console.log('Completed getting the Shared User Data from the Shared Data storee in User Effects')\n      });\n      ;\n    }\n\n  }\n\n  UserEffects.ɵfac = function UserEffects_Factory(t) {\n    return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i3.Store));\n  };\n\n  UserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserEffects,\n    factory: UserEffects.ɵfac\n  });\n  return UserEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}