{"ast":null,"code":"import { select } from '@ngrx/store';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as fromCertficationShell from '../state';\nimport * as CertificationActions from '../state/certification-shell.actions';\nimport * as fromShared from '../../../shared/state';\nimport * as fromAuth from '../../../auth/state';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/common\";\n\nfunction EditCertificationShellComponent_span_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"Active\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction EditCertificationShellComponent_span_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 32);\n    i0.ɵɵtext(1, \"Not Active\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let EditCertificationShellComponent = /*#__PURE__*/(() => {\n  class EditCertificationShellComponent {\n    constructor(fb, sharedStore, authStore, renderer, certificationShellStore, dialogRef) {\n      this.fb = fb;\n      this.sharedStore = sharedStore;\n      this.authStore = authStore;\n      this.renderer = renderer;\n      this.certificationShellStore = certificationShellStore;\n      this.dialogRef = dialogRef;\n      this.faClose = faTimesCircle;\n      this.origValues = true;\n      this.controllerClass = 'Certification';\n      this.myColor = 'primary';\n      this.authenticated$ = this.authStore.pipe(select(fromAuth.getIsAuthenticated));\n      this.authenticatedUserId$ = this.authStore.pipe(select(fromAuth.getAuthenticatedUserId));\n      this.viewUserId$ = this.sharedStore.pipe(select(fromShared.getUserId));\n      this.myCert$ = this.certificationShellStore.pipe(select(fromCertficationShell.getCurrentCertification));\n      this.certificationForm = this.fb.group({\n        certName: [''],\n        certID: [''],\n        isActive: [false],\n        issuingBodyName: [''],\n        issuingBodyLogo: [''],\n        issuedDate: ['']\n      });\n    }\n\n    ngOnInit() {\n      this.myCert$.subscribe({\n        next: value => {\n          if (value.id !== '') {\n            console.log(value);\n            this.myCert = value;\n            this.setControls(value);\n          }\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the user's current Certification from store in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed getting user's Current Certification from ngrx store in Education's Certification Edit Shell component\")\n      });\n      this.authenticated$.subscribe({\n        next: value => {\n          if (value) {\n            console.log(value);\n            this.auth = value;\n          }\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the current user's authentication from Auth ngrx store in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed getting current user's authentication from Auth ngrx store in Education's Certification Edit Shell component\")\n      });\n      this.authenticatedUserId$.subscribe({\n        next: value => {\n          if (value) {\n            console.log(value);\n            this.authenticatedUserId = value;\n          }\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the current user's authenticated UserId from Auth ngrx store in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed getting current user's authenticated UserId from Auth ngrx store in Education's Certification Edit Shell component\")\n      });\n      this.viewUserId$.subscribe({\n        next: value => {\n          if (value) {\n            console.log(value);\n            this.userBeingViewedId = value;\n          }\n        },\n        error: err => console.log(\"OOps sorry, error occured getting the user being view UserId from Shared ngrx store in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed getting the user being viewed UserId from Shared ngrx store in Education's Certification Edit Shell component\")\n      });\n      this.initiateControls();\n      this.monitorControlChanges();\n    }\n\n    initiateControls() {\n      this.certNameAbstractControl = this.certificationForm.get('certName');\n      this.certIDAbstractControl = this.certificationForm.get('certID');\n      this.isActiveAbstractControl = this.certificationForm.get('isActive');\n      this.issuingBodyNameAbstractControl = this.certificationForm.get('issuingBodyName');\n      this.issuingBodyLogoAbstractControl = this.certificationForm.get('issuingBodyLogo');\n      this.issuedDateAbstractControl = this.certificationForm.get('issuedDate');\n    }\n\n    setControls(cert) {\n      var _a, _b, _c, _d, _e, _f;\n\n      (_a = this.certNameAbstractControl) === null || _a === void 0 ? void 0 : _a.setValue(cert.certName);\n      (_b = this.certIDAbstractControl) === null || _b === void 0 ? void 0 : _b.setValue(cert.certID);\n      (_c = this.isActiveAbstractControl) === null || _c === void 0 ? void 0 : _c.setValue(cert.isActive);\n      (_d = this.issuingBodyNameAbstractControl) === null || _d === void 0 ? void 0 : _d.setValue(cert.issuingBody_Name);\n      (_e = this.issuingBodyLogoAbstractControl) === null || _e === void 0 ? void 0 : _e.setValue(cert.issuingBody_Logo);\n      (_f = this.issuedDateAbstractControl) === null || _f === void 0 ? void 0 : _f.setValue(cert.issuedDate);\n    }\n\n    monitorControlChanges() {\n      var _a, _b, _c, _d, _e, _f;\n\n      (_a = this.certNameAbstractControl) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value) {\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationCertNameFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification CertName in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating  user's Current Certification CertName in ngrx store in Education's Certification Edit Shell component\")\n      });\n      (_b = this.certIDAbstractControl) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value != null) {\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIdFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification IsActive in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating user's Current Certification IsActive in ngrx store in Education's Certification Edit Shell component\")\n      });\n      (_c = this.isActiveAbstractControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value != null) {\n            console.log('CHANGE FROM ABSTRACT', value);\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIsActiveFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification IsActive in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating  user's Current Certification IsActive in ngrx store in Education's Certification Edit Shell component\")\n      });\n      (_d = this.issuingBodyNameAbstractControl) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value) {\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIssuingBodyNameFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification Issuing Body Name in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating  user's Current Certification Issuing Body Name in ngrx store in Education's Certification Edit Shell component\")\n      });\n      (_e = this.issuingBodyLogoAbstractControl) === null || _e === void 0 ? void 0 : _e.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value) {\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIssuingBodyLogoFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification Issuing Body Logo in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating  user's Current Certification Issuing Body Logo in ngrx store in Education's Certification Edit Shell component\")\n      });\n      (_f = this.issuedDateAbstractControl) === null || _f === void 0 ? void 0 : _f.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe({\n        next: value => {\n          if (value) {\n            this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIssuedDateFromCertShellEditCpt(value));\n          }\n        },\n        error: err => console.log(\"OOps sorry, error while updating user's current Certification Issued Date in Education's Certification Edit Shell component: \", err),\n        complete: () => console.log(\"Completed updating  user's Current Certification Issued Date in ngrx store in Education's Certification Edit Shell component\")\n      });\n    }\n\n    getClass() {\n      return this.controllerClass;\n    }\n\n    processNewLogoUrlRt(returnUrl) {\n      console.log('newLogoURL: ', returnUrl); // this.issuingBodyLogoAbstractControl?.setValue(returnUrl);\n\n      this.certificationShellStore.dispatch(new CertificationActions.SetCurrentCertificationIssuingBodyLogoFromCertShellEditCpt(returnUrl));\n    }\n\n    deleteFromDB(value) {\n      if (this.userBeingViewedId == this.authenticatedUserId && this.auth) {\n        this.certificationShellStore.dispatch(new CertificationActions.DeleteCertificationToDB());\n        this.dialogRef.close();\n      }\n    }\n\n    resetChanges(value) {\n      this.certificationShellStore.dispatch(new CertificationActions.ResetCurrentCertificationToOriginal());\n    }\n\n    saveToDB(value) {\n      if (this.userBeingViewedId == this.authenticatedUserId && this.auth) {\n        this.certificationShellStore.dispatch(new CertificationActions.UpdateCertificationToDB());\n        this.dialogRef.close();\n      }\n    }\n\n    isCertActive(event) {\n      var _a, _b;\n\n      console.log('HELLO');\n      ;\n      let Ctl = document.getElementById('activeSlideToggleId');\n\n      if (event.checked) {\n        (_a = this.isActiveAbstractControl) === null || _a === void 0 ? void 0 : _a.setValue(true);\n        console.log('HELLO ADD CLASS');\n        this.renderer.addClass(Ctl, 'certIsActive');\n      } else if (!event.checked) {\n        (_b = this.isActiveAbstractControl) === null || _b === void 0 ? void 0 : _b.setValue(false);\n        console.log('HELLO REMOVE CLASS');\n        this.renderer.removeClass(Ctl, 'certIsActive');\n      }\n    }\n\n    closeDialog() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  EditCertificationShellComponent.ɵfac = function EditCertificationShellComponent_Factory(t) {\n    return new (t || EditCertificationShellComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.MatDialogRef));\n  };\n\n  EditCertificationShellComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditCertificationShellComponent,\n    selectors: [[\"app-edit-certification-shell\"]],\n    decls: 49,\n    vars: 15,\n    consts: [[\"action\", \"\", 3, \"formGroup\"], [1, \"shellContainer\"], [1, \"certContent\"], [1, \"header\"], [1, \"headerText\"], [1, \"closeIcon\", 3, \"icon\", \"click\"], [\"id\", \"certNameSection\", 1, \"infoSection\"], [1, \"infoContainer\"], [1, \"certInfo\"], [1, \"certName\"], [1, \"label-wrapper\"], [\"for\", \"certNameInputId\", \"id\", \"certNameLabelId\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"certName\", \"id\", \"certNameInputId\", 3, \"placeholder\"], [1, \"certID\"], [\"for\", \"certIDInputId\", \"id\", \"certIDLabelId\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"certID\", \"id\", \"certIDInputId\", 3, \"placeholder\"], [1, \"infoSection\"], [1, \"issuingBodyContainer\"], [1, \"name\"], [\"for\", \"certIssuingBodyNameId\", \"id\", \"certIssuingBodyNameLabelId\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"issuingBodyName\", \"id\", \"certIssuingBodyNameInputId\", 3, \"placeholder\"], [1, \"logo\"], [1, \"logoGetter\", 3, \"Title\", \"docID\", \"projectCreatorID\", \"typeOfClass\", \"preview\", \"mediaRtUrl\"], [1, \"isActiveContainer\"], [\"for\", \"certIsActiveInputId\", \"id\", \"certIsActiveLabelId\"], [1, \"slideToggleDiv\"], [\"id\", \"activeSlideToggleId\", 3, \"checked\", \"color\", \"change\"], [\"id\", \"activeButtonId\", 1, \"activeButton\"], [\"class\", \"certIsActive\", 4, \"ngIf\"], [\"class\", \"certIsNotActive\", 4, \"ngIf\"], [3, \"save\", \"reset\", \"delete\"], [1, \"certIsActive\"], [1, \"certIsNotActive\"]],\n    template: function EditCertificationShellComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-dialog-content\")(1, \"form\", 0)(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"p\");\n        i0.ɵɵtext(7, \"Edit Certification\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"fa-icon\", 5);\n        i0.ɵɵlistener(\"click\", function EditCertificationShellComponent_Template_fa_icon_click_8_listener() {\n          return ctx.closeDialog();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(9, \"mat-divider\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7)(12, \"div\", 8)(13, \"div\", 9)(14, \"div\", 10)(15, \"mat-label\", 11);\n        i0.ɵɵtext(16, \" Certification Name: \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"mat-form-field\");\n        i0.ɵɵelement(18, \"input\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 13)(20, \"div\", 10)(21, \"mat-label\", 14);\n        i0.ɵɵtext(22, \"Certification ID#: \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"mat-form-field\");\n        i0.ɵɵelement(24, \"input\", 15);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(25, \"div\", 16)(26, \"div\", 7)(27, \"div\", 17)(28, \"div\", 18)(29, \"div\", 10)(30, \"mat-label\", 19);\n        i0.ɵɵtext(31, \"Issuing Body: \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"mat-form-field\");\n        i0.ɵɵelement(33, \"input\", 20);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"div\", 21)(35, \"app-image-getter\", 22);\n        i0.ɵɵlistener(\"mediaRtUrl\", function EditCertificationShellComponent_Template_app_image_getter_mediaRtUrl_35_listener($event) {\n          return ctx.processNewLogoUrlRt($event);\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(36, \"div\", 16)(37, \"div\", 7)(38, \"div\", 23)(39, \"div\", 10)(40, \"mat-label\", 24);\n        i0.ɵɵtext(41, \" IsActive \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(42, \"div\", 25)(43, \"mat-slide-toggle\", 26);\n        i0.ɵɵlistener(\"color\", function EditCertificationShellComponent_Template_mat_slide_toggle_color_43_listener() {\n          return ctx.myColor;\n        })(\"change\", function EditCertificationShellComponent_Template_mat_slide_toggle_change_43_listener($event) {\n          return ctx.isCertActive($event);\n        });\n        i0.ɵɵpipe(44, \"async\");\n        i0.ɵɵelementStart(45, \"p\", 27);\n        i0.ɵɵtemplate(46, EditCertificationShellComponent_span_46_Template, 2, 0, \"span\", 28);\n        i0.ɵɵtemplate(47, EditCertificationShellComponent_span_47_Template, 2, 0, \"span\", 29);\n        i0.ɵɵelementEnd()()()()()()();\n        i0.ɵɵelementStart(48, \"app-edit-action-buttons\", 30);\n        i0.ɵɵlistener(\"save\", function EditCertificationShellComponent_Template_app_edit_action_buttons_save_48_listener($event) {\n          return ctx.saveToDB($event);\n        })(\"reset\", function EditCertificationShellComponent_Template_app_edit_action_buttons_reset_48_listener($event) {\n          return ctx.resetChanges($event);\n        })(\"delete\", function EditCertificationShellComponent_Template_app_edit_action_buttons_delete_48_listener($event) {\n          return ctx.deleteFromDB($event);\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.certificationForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"icon\", ctx.faClose);\n        i0.ɵɵadvance(10);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.myCert.certName);\n        i0.ɵɵadvance(6);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.myCert.certID);\n        i0.ɵɵadvance(9);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.myCert.issuingBody_Name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"Title\", \"Issuing Body Logo\")(\"docID\", ctx.myCert.id)(\"projectCreatorID\", ctx.myCert.projectCreatorID)(\"typeOfClass\", ctx.getClass())(\"preview\", ctx.myCert.issuingBody_Logo);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"checked\", i0.ɵɵpipeBind1(44, 13, ctx.myCert$).isActive);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.myCert.isActive == true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.myCert.isActive == false);\n      }\n    },\n    dependencies: [i4.NgIf, i3.MatDialogContent, i4.AsyncPipe],\n    styles: [\"mat-dialog-container[_ngcontent-%COMP%]{padding:0}mat-dialog-container[_ngcontent-%COMP%]   mat-dialog-content[_ngcontent-%COMP%]{background-color:#fff}.shellContainer[_ngcontent-%COMP%]{padding:10px;display:flex;flex-direction:column;justify-content:center;scroll-behavior:auto;overflow-x:hidden;width:500px;margin:auto;align-content:space-between;border:solid 1px rgba(238,224,224,.337254902)}.shellContainer[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{width:100%;margin:auto;font-size:12px;font-family:furtura-pt;padding:0;color:var(--secondaryColor)}.shellContainer[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .headerText[_ngcontent-%COMP%]{padding:auto 10px auto 0;display:flex;flex-direction:row;justify-content:space-between}.shellContainer[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .headerText[_ngcontent-%COMP%]   .closeIcon[_ngcontent-%COMP%]{color:var(--accent1Color)}.shellContainer[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .headerText[_ngcontent-%COMP%]   .closeIcon[_ngcontent-%COMP%]:hover{color:var(--primaryColor)}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]{margin:30px 10px;justify-self:center;width:80%;display:flex;flex-direction:column;row-gap:30px;justify-content:flex-end;align-self:center;overflow-x:hidden}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]{margin:0 auto;justify-self:space-between;width:100%}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]{width:100%}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .label-wrapper[_ngcontent-%COMP%]{width:50%;height:20px;padding:4px 0}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .label-wrapper[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%]{height:20px;margin:0;font-size:9px;color:var(--primaryColor)}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .certInfo[_ngcontent-%COMP%], .shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .issuingBodyContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:30px;justify-content:space-between;width:100%}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{margin:0;width:100%;padding:4px 0}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .infoSection#certNameSection[_ngcontent-%COMP%]{margin-top:20px 0;padding:20px}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .isActiveContainer[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:space-between;row-gap:10px}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .isActiveContainer[_ngcontent-%COMP%]   .slideToggleDiv[_ngcontent-%COMP%]{display:flex;flex-direction:row;column-gap:10px;width:200px}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .isActiveContainer[_ngcontent-%COMP%]   .slideToggleDiv[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{margin:auto 10px;height:100%}.shellContainer[_ngcontent-%COMP%]   .certContent[_ngcontent-%COMP%]   .infoSection[_ngcontent-%COMP%]   .infoContainer[_ngcontent-%COMP%]   .isActiveContainer[_ngcontent-%COMP%]   .slideToggleDiv[_ngcontent-%COMP%]   p.activeButton[_ngcontent-%COMP%]{margin:10px 20px}.shellContainer[_ngcontent-%COMP%]   .logoGetter[_ngcontent-%COMP%]{margin-top:20px;width:600px}.shellContainer[_ngcontent-%COMP%]   app-edit-action-buttons[_ngcontent-%COMP%]{margin-top:20px;display:flex;flex-direction:row;column-gap:30px;justify-content:flex-end}.certIsActive[_ngcontent-%COMP%]{color:var(--accent3Color)}.certIsNotActive[_ngcontent-%COMP%]{color:var(--secondaryColor)}\"]\n  });\n  return EditCertificationShellComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}